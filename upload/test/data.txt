#!/usr/bin/env python
from django.core.management import execute_manager
try:
    import settings # Assumed to be in the same directory.
except ImportError:
    import sys
    sys.stderr.write("Error: Can't find the file 'settings.py' in the directory containing %r. It appears you've customized things.\nYou'll have to run django-admin.py, passing it your settings module.\n(If the file settings.py does indeed exist, it's causing an ImportError somehow.)\n" % __file__)
    sys.exit(1)

if __name__ == "__main__":
    execute_manager(settings)
# Django settings for upload project.
import os

UPLOAD_DIR = os.path.join(os.path.basename(__file__), 'upload')
UPLOAD_TMPDIR = os.path.join(os.path.basename(__file__), 'upload-tmp')

DEBUG = True
TEMPLATE_DEBUG = DEBUG

ADMINS = (
    # ('Your Name', 'your_email@domain.com'),
)

MANAGERS = ADMINS

DATABASE_ENGINE = ''           # 'postgresql_psycopg2', 'postgresql', 'mysql', 'sqlite3' or 'oracle'.
DATABASE_NAME = ''             # Or path to database file if using sqlite3.
DATABASE_USER = ''             # Not used with sqlite3.
DATABASE_PASSWORD = ''         # Not used with sqlite3.
DATABASE_HOST = ''             # Set to empty string for localhost. Not used with sqlite3.
DATABASE_PORT = ''             # Set to empty string for default. Not used with sqlite3.

# Local time zone for this installation. Choices can be found here:
# http://en.wikipedia.org/wiki/List_of_tz_zones_by_name
# although not all choices may be available on all operating systems.
# If running in a Windows environment this must be set to the same as your
# system time zone.
TIME_ZONE = 'America/Chicago'

# Language code for this installation. All choices can be found here:
# http://www.i18nguy.com/unicode/language-identifiers.html
LANGUAGE_CODE = 'en-us'

SITE_ID = 1

# If you set this to False, Django will make some optimizations so as not
# to load the internationalization machinery.
USE_I18N = True

# Absolute path to the directory that holds media.
# Example: "/home/media/media.lawrence.com/"
MEDIA_ROOT = ''

# URL that handles the media served from MEDIA_ROOT. Make sure to use a
# trailing slash if there is a path component (optional in other cases).
# Examples: "http://media.lawrence.com", "http://example.com/media/"
MEDIA_URL = ''

# URL prefix for admin media -- CSS, JavaScript and images. Make sure to use a
# trailing slash.
# Examples: "http://foo.com/media/", "/media/".
ADMIN_MEDIA_PREFIX = '/media/'

# Make this unique, and don't share it with anybody.
SECRET_KEY = 't1!8au$#zt8gote@9v__!&g&53s&3dln(8izoybutf$d^8l%jx'

# List of callables that know how to import templates from various sources.
TEMPLATE_LOADERS = (
    'django.template.loaders.filesystem.load_template_source',
    'django.template.loaders.app_directories.load_template_source',
#     'django.template.loaders.eggs.load_template_source',
)

MIDDLEWARE_CLASSES = (
    'django.middleware.common.CommonMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
)

ROOT_URLCONF = 'upload.urls'

TEMPLATE_DIRS = (
    # Put strings here, like "/home/html/django_templates" or "C:/www/django/templates".
    # Always use forward slashes, even on Windows.
    # Don't forget to use absolute paths, not relative paths.
)

INSTALLED_APPS = (
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.sites',
)
from django.conf.urls.defaults import *

# Uncomment the next two lines to enable the admin:
# from django.contrib import admin
# admin.autodiscover()

urlpatterns = patterns('',
    (r'^upload/', 'upload.handler.upload_request'),
    (r'^upload/(\d+)/', 'upload.handler.upload_chunk'),

    # Uncomment the admin/doc line below and add 'django.contrib.admindocs' 
    # to INSTALLED_APPS to enable admin documentation:
    # (r'^admin/doc/', include('django.contrib.admindocs.urls')),

    # Uncomment the next line to enable the admin:
    # (r'^admin/(.*)', admin.site.root),
)
from django.http import HttpResponse
from django import forms

import hashlib

from upload.settings import UPLOAD_DIR, UPLOAD_TMPDIR
import os

db = {
	'next_id': 0,
	'data': {}
}

class UploadRequestForm(forms.Form):
	filename = forms.CharField()
	size = forms.IntegerField()
	sha1sum = forms.CharField()

class UploadHandlerForm(forms.Form):
	offset = forms.IntegerField()
	length = forms.IntegerField()
	data = forms.FileField()

def upload_request(request):
	global db

	form = UploadRequestForm(request.POST)
	if form.is_valid():
		id = db['next_id']
		db['next_id'] += 1

		dir = os.path.join(UPLOAD_DIR, str(id))
		file = os.path.join(dir, form.cleaned_data['filename'])
		tmpdir = os.path.join(UPLOAD_TMPDIR, str(id))

		os.mkdir(dir)
		os.mkdir(tmpdir)

		data = {
			'size': form.cleaned_data['size'],
			'sha1sum': form.cleaned_data['sha1sum'],
			'filename': form.cleaned_data['filename'],
			'dir': dir,
			'file': file,
			'tmpdir': tmpfile,
			'uploaded': 0,
		}

		db['data'][id] = data

		response = HttpResponse("request ok. id=%d" % id)
		response['Content-Location'] = '/upload/%d/' % id

		return response

	else:

		return HttpResponse("invalid request")

def upload_chunk(request, id):
	global db

	data = db['data'].get(id, None)
	if data:
		
		form = UploadHandlerForm(request.POST, request.FILES)
		if form.is_valid():
			info = save_file(data, request.FILES['data'])

			offset = form.cleaned_data['offset']
			length = form.cleaned_data['length']
			sha1sum = form.cleaned_data['sha1sum']

			if length == info['size'] and sha1sum == info['sha1sum'] and data['uploaded'] == offset:
				append_file(data, info)

				return HttpResponse("OK")

			else:
				return HttpResponse("invalid chunk")

		else:
			return HttpResponse("invalid form")
	
	else:
		return HttpResponse("invalid id")

def save_file(data, file):
	fname = os.path.join(data['tmpdir'], "tmp")
	f = open(fname, "w")

	for chunk in file.chunks():
		f.write(chunk)
	
	f.close()

	info = {}
	info['file'] = fname
	info['size'] = os.path.getsize(fname)
	info['sha1sum'] = hashlib.sha1(open(fname, 'rb').read()).hexdigest()

	return info

def append_file(data, info):
	fd = open(data['file'], "w+")
	fc = open(info['file'], "r")

	fd.write(fc.read())

	fc.close()
	fd.close()

	data['uploaded'] += info['length']

